#include <iostream>
#include <typeinfo>
#include <windows.h>
using namespace std;
struct nod
{
    int info;
    nod *dr,*st;
public:
    void init()
    {
        this->dr=NULL;
        this->st=NULL;
    }
};

int insert(nod * &ab,int x)
{
    if(ab == NULL)
    {
        nod * t= new nod;
        t->init();
        t->info=x;
        ab=t;
    }
    else
    {
        if(x<ab->info)
        {
            insert(ab->st,x);

        }
        else
        {
            insert(ab->dr,x);
        }
    }

}

int search(nod * ab,int x)
{
    if(ab == NULL)
    {
        return 0;
    }
    if(ab->info == x)
    {
        return 1;
    }
    else if(x<ab->info)
    {
        return search(ab->st,x);
    }
    else
    {
        return search(ab->dr,x);
    }
}

int findMax(nod * ab)
{
    if(ab == NULL)
    {
        return -1;
    }
    if(ab->dr != NULL)
    {
        return findMax(ab->dr);
    }
    else
    {
        return ab->info;
    }
}

void RSD(nod *ab)
{
    if(ab!=NULL)
    {
        cout<<ab->info<<" , ";
        RSD(ab->st);
        RSD(ab->dr);
    }

}


void SRD(nod *ab,int v[100],int &i)
{
    if(ab!=NULL)
    {
        SRD(ab->st,v,i);
        v[i]=ab->info;
        i++;
        SRD(ab->dr,v,i);
    }
}
void SRD(nod *ab)
{
    if(ab!=NULL)
    {
        SRD(ab->st);
        cout<<ab->info<<" , ";
        SRD(ab->dr);
    }
}

void SDR(nod *ab)
{
    if(ab!=NULL)
    {
        SDR(ab->st);
        SDR(ab->dr);
        cout<<ab->info<<" , ";
    }
}

int deleteN(nod *&ab,int x,int BehaviourIndex)
{
    // verificam daca exista nodul in arbore cu RSD
    if(ab == NULL)
    {
        cout<<"\n Arborele este gol!";
        return 0;
    }
    if(ab->st == NULL && ab->dr == NULL)
    {
        cout<<"\n Stergem doar o frunza ! direct din apel!";
        ab=NULL;
        return 0;
    }
    cout<<"\n Suntem pe "<<ab->info<<" Beh"<<BehaviourIndex;
    cout<<" ce are in stanga pe "<<ab->st<<" si in dreapta "<<ab->dr<<" x="<<x;
    if(BehaviourIndex == 1 && search(ab,x) == 0)
        {
            cout<<"\n Nu exista "<<x<<" in arbore !";
            return -1;
        }
    int pozitie = 0;
    if(ab->dr!=NULL && ab->dr->info==x )
    {  cout<<"\n Este in dreapta!";
        pozitie = 1;
        BehaviourIndex =0;
    }
    else if( ab->st != NULL &&  ab->st->info == x )
    {  cout<<"\n Este in stanga";
        pozitie = -1;
        BehaviourIndex =0;
    }
    else if(x<ab->info && BehaviourIndex == 1)
    {
        return deleteN(ab->st,x,1);
    }
    else if(x>ab->info && BehaviourIndex == 1)
    {
        return deleteN(ab->dr,x,1);
    }
    else if(x==ab->info && BehaviourIndex == 1)
    {
        pozitie=0;
    }

    if(pozitie ==0)
    {
        cout<<"\n SUNTEM PE RADACINA1";
    }

    if(pozitie == -1)
    // I cazul in care x este frunza , doar il eliminam din arbore
    {    cout<<"\n Trecem sa scoate!"<<ab->info<<" "<<ab->st->info;
        if(ab->st->st == NULL && ab->st->dr == NULL)
        {  cout<<"\n Suntem in cazul frunza !";
            ab->st=NULL;
            //cout<<"\n\n"<<ab->st->info;
        }
        else if(ab->st->st == NULL && ab->st->dr !=NULL)
        {  cout<<"\n Suntem in cazul cu un singur fiu in dreapta diferit de null!";
            // II cazul in care x are un fiu , facem legatura tata fiu , apoi stergem nodul
            nod * n = ab->st;
            ab->st = ab->st->dr;
            delete n;
        }
        else if(ab->st->st != NULL && ab->st->dr ==NULL)
        {  cout<<"\n Suntem in cazul cu un singur fiu in STANGA diferit de null";
            nod * n = ab->st;
            ab->st = ab->st->st;
            delete n;
        }
        else
        {

            // III cazul in care x are doi fii ,caut predecesorul in inordine
            cout<<"\n Suntem in cazul in care are doi fii!";
            int x = findMax(ab->st->st);
            cout<<"\n Inlocuim "<<ab->st->info<<" cu "<<x;
            ab->st->info = x;
            deleteN(ab->st,x,1);
        }
    }
    else if(pozitie == 1)
    {  cout<<"\n Trecem sa scoatem !"<<ab->info<<" "<<ab->dr->info;
        if(ab->dr->st == NULL && ab->dr->dr == NULL)
        {  cout<<"\n Suntem in cazul frunza!";
            ab->dr = NULL;
            //cout<<"\n\n"<<ab->dr->info;
        }
        else if(ab->dr->st == NULL && ab->dr->dr !=NULL)
        {  cout<<"\n Suntem in cazul cu fiul din dreapta diferit de null!";
            // II cazul in care x are un fiu , facem legatura tata fiu , apoi stergem nodul
            nod * n = ab->dr;
            ab->dr = ab->dr->dr;
            delete n;
        }
        else if(ab->dr->st != NULL && ab->dr->dr ==NULL)
        { cout<<"\n Suntem in cazul cu fiul din stanga diferit de null!";
            nod * n = ab->dr;
            ab->dr = ab->dr->st;
            delete n;
        }
        else
        {  cout<<"\n Suntem in cazul cu ambii fii diferiti de null1";

            // III cazul in care x are doi fii ,caut predecesorul in inordine
            int x = findMax(ab->dr->st);
            cout<<"\n Nodul pe care il inlocuim este "<<ab->dr->info <<" cu "<<x;
            ab->dr->info = x;
            deleteN(ab->dr,x,1);
        }


    }
    else if(pozitie == 0)
    {
        int x=findMax(ab->st);
        ab->info = x;
        deleteN(ab->st,x,1);
    }

}

void afisare(int v[200],int i)
{
    cout<<" Scrieti cele doua capete ale intervalului intre care sa se afiseze valorile \n";
    int k1,k2;
    cin>>k1;
    cin>>k2;
    if(k1 < k2 && k1>=v[0] && k2<=v[i-1])
    {  int k;
        for(k=0;k<i;k++)
        {   if(v[k]>=k1)
              break;
        }

        for(int kn=k;v[kn]<=k2 && kn<i;kn++)
        {
              cout<<" "<<v[kn];
        }
    }

    else
    {
        cout<<"\n Intervalul introdus este eronat!";
    }

}

// Problema 3

/*struct nodI
{
    int info,LeftSize;
    nod *st,*dr;
    void init()
    {
        this->dr=NULL;
        this->st=NULL;
        this->info=0;
        this->LeftSize=0;
    }
};
int insert(nodI * &ab,int x)
{
    if(ab == NULL)
    {
        nodI * t= new nodI;
        t->init();
        t->info=x;
        ab=t;
    }
    else
    {
        if(x<ab->info)
        {
            insert(ab->st,x);

        }
        else
        {
            insert(ab->dr,x);
        }
    }

}
void SRD(nodI *ab)
{
    if(ab!=NULL)
    {
        SRD(ab->st);
        cout<<ab->info<<" ,";
        SRD(ab->dr);
    }
}
void SRD(nodI *ab,int k[100],int index[100],int &i)
{
    if(ab!=NULL)
    {
        SRD(ab->st,k,i);
        k[i]=ab->info;
        index[ab->info]=i;
        i++;
        SRD(ab->dr,ki);
    }
}*/
int main()
{
    nod * ab = new nod;
    ab=NULL;
    int k[100];
    int i=0;
    int v[20]={7,10,21,8,5,4};
    for(int i=0;i<6;i++)
    {
        insert(ab,v[i]);
    }
    int b;
    do
    {
        cout<<"\n Introduceti optiunea dorita :";
        cout<<"\n 2-search";
        cout<<"\n 3-findmax";
        cout<<"\n 4- Cele 3 parcurgeri";
        cout<<"\n 5-stergerea unui nod\n";
        cin>>b;
        switch(b)
      {
      case 2:
        {
            cout<<"\n Introduceti elementul pentru facem verificarea : ";
            int a;
            cin>>a;
            if(search(ab,a)) cout<<"\n Se afla in arbore ";
            else cout<<"\n Nu se afla in arbore";
            break;
        }
      case 3:
        {
            cout<<"\n Maximul din arbore este :";
            cout<<findMax(ab);

            break;
        }
      case 4:
        {
            cout<<"\n RSD:";
            RSD(ab);
            cout<<"\n SRD:";
            SRD(ab);
            cout<<"\n SDR:";
            SDR(ab);

            break;
        }
      case 5:
        {
            cout<<"\n Introduceti nodul de sters :";
            int a;
            cin>>a;
            deleteN(ab,a,1);
            break;
        }

      }
    }while(b>=1 && b<=5);
    cout<<" \n\n      PROBLEMA 2 \n";
    SRD(ab,k,i);
    cout<<"\n";
    for(int j=0;j<i;j++)
    {
        cout<<" "<<k[j];
    }
    cout<<"\n";
    int raspuns = 1;
    do{
    afisare(k,i);
    cout<<"\n Mai doriti o incercare? 1=DA ";
    cin>>raspuns;
    }while(raspuns==1);
    return 0;

   /* nodI *abI = new nodI;
    abI = NULL;
    int v[10]={8,10,5,12,1,3,2};
    for(int i=0;i<7;i++)
    {
        insert(abI,v[i]);
    }
    int aux[100],i=0,index[100]={0};
    SRD(abI,aux,i,index);
    for(int j=0;j<20;j++)
    {
        cout<<" "<<index[j];
    }*/
}
